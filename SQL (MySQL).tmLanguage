<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>bundleUUID</key>
	<string>AAB4CBF7-73F9-11D9-B89A-000D93589AF6</string>
	<key>fileTypes</key>
	<array>
		<string>sql</string>
		<string>ddl</string>
		<string>dml</string>
	</array>
	<key>foldingStartMarker</key>
	<string>\s*\(\s*$</string>
	<key>foldingStopMarker</key>
	<string>^\s*\)</string>
	<key>keyEquivalent</key>
	<string>^~S</string>
	<key>name</key>
	<string>SQL (MySQL)</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#comments</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.create.sql</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.other.sql</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>entity.other.inherited-class.sql</string>
				</dict>
				<key>7</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.sql</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?i:^\s*(create)\s+(aggregate|conversion|database|domain|function|group|(unique\s+)?index|language|operator class|operator|rule|schema|sequence|tablespace|type|user)\s+)(?:(['"`]?)(\w+)\4\.)?(['"`]?)(\w+)\6</string>
			<key>name</key>
			<string>meta.create.sql</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.create.sql</string>
				</dict>
				<key>10</key>
				<dict>
					<key>name</key>
					<string>constant.other.database-name.sql</string>
				</dict>
				<key>12</key>
				<dict>
					<key>name</key>
					<string>constant.other.table-name.sql</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.other.create.table.sql</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>entity.other.inherited-class.sql</string>
				</dict>
				<key>6</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.sql</string>
				</dict>
				<key>8</key>
				<dict>
					<key>name</key>
					<string>keyword.other.create.table.sql</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?i:^\s*(create)\s+((?:temporary\s+)?table(?:\s+if\s+not\s+exists)?\s+)(?:(["`]?)(\w+)\3\.)?(["`]?)(\w+)\5)(?i:\s+(\(?)\s*(like)\s+(?:(["`]?)(\w+)\9\.)?(["`]?)(\w+)\11\s*\7)?</string>
			<key>name</key>
			<string>meta.create.table.sql</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.create.sql</string>
				</dict>
				<key>10</key>
				<dict>
					<key>name</key>
					<string>entity.other.inherited-class.sql</string>
				</dict>
				<key>12</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.sql</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.other.create.view.mysql.sql</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>constant.other.algorithm.mysql.sql</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>keyword.other.create.view.mysql.sql</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>constant.other.definer.mysql.sql</string>
				</dict>
				<key>6</key>
				<dict>
					<key>name</key>
					<string>keyword.other.create.view.mysql.sql</string>
				</dict>
				<key>7</key>
				<dict>
					<key>name</key>
					<string>constant.other.security.mysql.sql</string>
				</dict>
				<key>8</key>
				<dict>
					<key>name</key>
					<string>keyword.other.view.sql</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?i:^\s*(create(?:\s+or\s+replace)?)(?:\s+(algorithm)\s*=\s*(undefined|merge|temptable))?(?:\s+(definer)\s*=\s*(?:(current_user)|\w+))?(?:\s+(sql\s+security)\s*=\s*(definer|invoker))?\s+(view)\s+)(?:(['"`]?)(\w+)\9\.)?(['"`]?)(\w+)\11</string>
			<key>name</key>
			<string>meta.create.view.sql</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.create.sql</string>
				</dict>
				<key>10</key>
				<dict>
					<key>name</key>
					<string>constant.other.database-name.sql</string>
				</dict>
				<key>12</key>
				<dict>
					<key>name</key>
					<string>constant.other.table-name.sql</string>
				</dict>
				<key>13</key>
				<dict>
					<key>name</key>
					<string>keyword.other.create.trigger.mysql.sql</string>
				</dict>
				<key>14</key>
				<dict>
					<key>name</key>
					<string>keyword.other.create.trigger.mysql.sql</string>
				</dict>
				<key>15</key>
				<dict>
					<key>name</key>
					<string>keyword.other.create.trigger.mysql.sql</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.other.create.trigger.mysql.sql</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>constant.other.definer.mysql.sql</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>keyword.other.trigger.sql</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.sql</string>
				</dict>
				<key>6</key>
				<dict>
					<key>name</key>
					<string>keyword.other.create.trigger.mysql.sql</string>
				</dict>
				<key>7</key>
				<dict>
					<key>name</key>
					<string>keyword.other.create.trigger.mysql.sql</string>
				</dict>
				<key>8</key>
				<dict>
					<key>name</key>
					<string>keyword.other.create.trigger.mysql.sql</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?i:^\s*(create)(?:\s+(definer)\s*=\s*(?:(current_user)|\w+))?\s+(trigger)\s+(\w+)\s+(before|after)\s+(insert|update|delete)\s+(on)\s+)(?:(['"`]?)(\w+)\9\.)?(['"`]?)(\w+)\11(?i:\s+(for)\s+(each)\s+(row))</string>
			<key>name</key>
			<string>meta.create.trigger.sql</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.create.sql</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.other.sql</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?i:^\s*(drop)\s+(aggregate|conversion|database|domain|function|group|index|language|operator class|operator|rule|schema|sequence|table(?:\s+if\s+exists)?|tablespace|trigger|type|user|view))</string>
			<key>name</key>
			<string>meta.drop.sql</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.create.sql</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.other.table.sql</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.sql</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>keyword.other.cascade.sql</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?i:\s*(drop)\s+(table)\s+(\w+)(\s+cascade)?\b)</string>
			<key>name</key>
			<string>meta.drop.sql</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.create.sql</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.other.table.sql</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?i:^\s*(alter)\s+(aggregate|conversion|database|domain|function|group|index|language|operator class|operator|rule|schema|sequence|table|tablespace|trigger|type|user|view)\s+)</string>
			<key>name</key>
			<string>meta.alter.sql</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.sql</string>
				</dict>
				<key>10</key>
				<dict>
					<key>name</key>
					<string>keyword.other.mysql.sql</string>
				</dict>
				<key>11</key>
				<dict>
					<key>name</key>
					<string>constant.other.charset.mysql.sql</string>
				</dict>
				<key>12</key>
				<dict>
					<key>name</key>
					<string>storage.type.sql</string>
				</dict>
				<key>13</key>
				<dict>
					<key>name</key>
					<string>constant.numeric.sql</string>
				</dict>
				<key>14</key>
				<dict>
					<key>name</key>
					<string>storage.type.sql</string>
				</dict>
				<key>15</key>
				<dict>
					<key>name</key>
					<string>constant.numeric.sql</string>
				</dict>
				<key>16</key>
				<dict>
					<key>name</key>
					<string>constant.language.mysql.sql</string>
				</dict>
				<key>17</key>
				<dict>
					<key>name</key>
					<string>constant.language.mysql.sql</string>
				</dict>
				<key>18</key>
				<dict>
					<key>name</key>
					<string>storage.type.sql</string>
				</dict>
				<key>19</key>
				<dict>
					<key>name</key>
					<string>constant.numeric.sql</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.type.sql</string>
				</dict>
				<key>20</key>
				<dict>
					<key>name</key>
					<string>keyword.other.mysql.sql</string>
				</dict>
				<key>21</key>
				<dict>
					<key>name</key>
					<string>constant.other.charset.mysql.sql</string>
				</dict>
				<key>22</key>
				<dict>
					<key>name</key>
					<string>keyword.other.mysql.sql</string>
				</dict>
				<key>23</key>
				<dict>
					<key>name</key>
					<string>constant.other.charset.mysql.sql</string>
				</dict>
				<key>24</key>
				<dict>
					<key>name</key>
					<string>storage.type.sql</string>
				</dict>
				<key>25</key>
				<dict>
					<key>name</key>
					<string>constant.numeric.sql</string>
				</dict>
				<key>26</key>
				<dict>
					<key>name</key>
					<string>constant.numeric.sql</string>
				</dict>
				<key>27</key>
				<dict>
					<key>name</key>
					<string>constant.language.mysql.sql</string>
				</dict>
				<key>28</key>
				<dict>
					<key>name</key>
					<string>constant.language.mysql.sql</string>
				</dict>
				<key>29</key>
				<dict>
					<key>name</key>
					<string>storage.type.sql</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>constant.numeric.sql</string>
				</dict>
				<key>30</key>
				<dict>
					<key>name</key>
					<string>constant.numeric.sql</string>
				</dict>
				<key>31</key>
				<dict>
					<key>name</key>
					<string>constant.numeric.sql</string>
				</dict>
				<key>32</key>
				<dict>
					<key>name</key>
					<string>keyword.other.mysql.sql</string>
				</dict>
				<key>33</key>
				<dict>
					<key>name</key>
					<string>constant.other.charset.mysql.sql</string>
				</dict>
				<key>34</key>
				<dict>
					<key>name</key>
					<string>keyword.other.mysql.sql</string>
				</dict>
				<key>35</key>
				<dict>
					<key>name</key>
					<string>constant.other.charset.mysql.sql</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>storage.type.sql</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>constant.numeric.sql</string>
				</dict>
				<key>6</key>
				<dict>
					<key>name</key>
					<string>storage.type.sql</string>
				</dict>
				<key>7</key>
				<dict>
					<key>name</key>
					<string>constant.numeric.sql</string>
				</dict>
				<key>8</key>
				<dict>
					<key>name</key>
					<string>keyword.other.mysql.sql</string>
				</dict>
				<key>9</key>
				<dict>
					<key>name</key>
					<string>constant.other.charset.mysql.sql</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?xi)

				# Data Types

				# Non-suffix types
				# Capture 1
				\b(year|time(?:stamp)?|date(?:time)?|(?:long|medium|tiny)?blob)\b

				# Non-suffix types with optional qualifiers
				# Capture 2 + 3i
				|\b((?:long|medium|tiny)?text)\b(?:\((\d+)\))?

				# Required numeric suffix types
				# Capture 4 + 5i
				|\b(varbinary)\((\d+)\)

				# Required numeric suffix types with optional qualifiers
				# Capture 6 + 7i + 8o + 9c + 10o + 11c
				|\b(varchar)\((\d+)\)(?:\s+(char(?:set|acter\sset))\s+([a-zA-Z0-9]+)(?:\s+(collate)\s+([_a-zA-Z0-9]+))?)?

				# Optianal single numeric suffix
				# Capture 12 + 13i
				|\b(bi(?:t|nary))\b(?:\((\d+)\))?

				# Optional single numeric suffix with optional qualifiers
				# Capture 14 + 15i + 16l + 17l
				|\b((?:big|medium|small|tiny)?int|integer|decimal|numeric)\b(?:\((\d+)\))?(?:\s+(unsigned))?(?:\s+(zerofill))?

				# Optional single numeric suffix with optional qualifiers
				# Capture 18 + 19i + 20o + 21c + 22o + 23c
				|\b(char)\b(?:\((\d+)\))?(?:\s+(char(?:set|acter\sset))\s+([a-zA-Z0-9]+)(?:\s+(collate)\s+([_a-zA-Z0-9]+))?)?

				# Optional double numeric suffix with optional qualifiers
				# Capture 24 + 25i + 26i + 27l + 28l
				|\b(numeric|d(?:ouble|ecimal)|float|real)\b(?:\((\d+),\s*(\d+)\))?(?:\s+(unsigned))?(?:\s+(zerofill))?

				# Required multi-valued suffix with optional qualifiers
				# Capture 29 + 30i + 31i + 32o + 33c + 34o + 35c
				|\b(set|enum)\((\d+)(?:,\s*(\d+))*\)(?:\s+(char(?:set|acter\sset))\s+([a-zA-Z0-9]+)(?:\s+(collate)\s+([_a-zA-Z0-9]+))?)?

			</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?i:\b((?:primary|foreign)\s+key|references|on\sdelete(\s+cascade)?|check|constraint)\b)</string>
			<key>name</key>
			<string>storage.modifier.sql</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b\d+\b</string>
			<key>name</key>
			<string>constant.numeric.sql</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?i:\b(select(\s+distinct)?|insert\s+(ignore\s+)?into|update|delete|from|set|where|group\sby|or|like|and|union(\s+all)?|having|order\sby|limit|(inner|cross)\s+join|straight_join|(left|right)(\s+outer)?\s+join|natural(\s+(left|right)(\s+outer)?)?\s+join)\b)</string>
			<key>name</key>
			<string>keyword.other.DML.sql</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?i:\b(on|((is\s+)?not\s+)?null)\b)</string>
			<key>name</key>
			<string>keyword.other.DDL.create.II.sql</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?i:\bvalues\b)</string>
			<key>name</key>
			<string>keyword.other.DML.II.sql</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?i:\b(begin(\s+work)?|start\s+transaction|commit(\s+work)?|rollback(\s+work)?)\b)</string>
			<key>name</key>
			<string>keyword.other.LUW.sql</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?i:\b(grant(\swith\sgrant\soption)?|revoke)\b)</string>
			<key>name</key>
			<string>keyword.other.authorization.sql</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?i:\bin\b)</string>
			<key>name</key>
			<string>keyword.other.data-integrity.sql</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?i:^\s*(comment\s+on\s+(table|column|aggregate|constraint|database|domain|function|index|operator|rule|schema|sequence|trigger|type|view))\s+.*?\s+(is)\s+)</string>
			<key>name</key>
			<string>keyword.other.object-comments.sql</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?i)\bAS\b</string>
			<key>name</key>
			<string>keyword.other.alias.sql</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?i)\b(DESC|ASC)\b</string>
			<key>name</key>
			<string>keyword.other.order.sql</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\*</string>
			<key>name</key>
			<string>keyword.operator.star.sql</string>
		</dict>
		<dict>
			<key>match</key>
			<string>[!&lt;&gt;]?=|&lt;&gt;|&lt;|&gt;</string>
			<key>name</key>
			<string>keyword.operator.comparison.sql</string>
		</dict>
		<dict>
			<key>match</key>
			<string>-|\+|/</string>
			<key>name</key>
			<string>keyword.operator.math.sql</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\|\|</string>
			<key>name</key>
			<string>keyword.operator.concatenator.sql</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>List of SQL99 built-in functions from http://www.oreilly.com/catalog/sqlnut/chapter/ch04.html</string>
			<key>match</key>
			<string>(?i)\b(CURRENT_(DATE|TIME(STAMP)?|USER)|(SESSION|SYSTEM)_USER)\b</string>
			<key>name</key>
			<string>support.function.scalar.sql</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>List of SQL99 built-in functions from http://www.oreilly.com/catalog/sqlnut/chapter/ch04.html</string>
			<key>match</key>
			<string>(?i)\b(AVG|COUNT|MIN|MAX|SUM)(?=\s*\()</string>
			<key>name</key>
			<string>support.function.aggregate.sql</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?i)\b(CONCATENATE|CONVERT|LOWER|SUBSTRING|TRANSLATE|TRIM|UPPER)\b</string>
			<key>name</key>
			<string>support.function.string.sql</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>constant.other.database-name.sql</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>constant.other.table-name.sql</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>constant.other.column-name.sql</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?:(?:`?(\w+)`?)\.)?(?:`?(\w+)`?)?\.`?(\w+)`?</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#strings</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#regexps</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>comments</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.sql</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(--).*$\n?</string>
					<key>name</key>
					<string>comment.line.double-dash.sql</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.sql</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(#).*$\n?</string>
					<key>name</key>
					<string>comment.line.number-sign.sql</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>/\*</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.sql</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\*/</string>
					<key>name</key>
					<string>comment.block.c</string>
				</dict>
			</array>
		</dict>
		<key>regexps</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>/(?=\S.*/)</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.sql</string>
						</dict>
					</dict>
					<key>end</key>
					<string>/</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.sql</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.regexp.sql</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string_interpolation</string>
						</dict>
						<dict>
							<key>match</key>
							<string>\\/</string>
							<key>name</key>
							<string>constant.character.escape.slash.sql</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>%r\{</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.sql</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>We should probably handle nested bracket pairs!?! -- Allan</string>
					<key>end</key>
					<string>\}</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.sql</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.regexp.modr.sql</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string_interpolation</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>string_escape</key>
		<dict>
			<key>match</key>
			<string>\\.</string>
			<key>name</key>
			<string>constant.character.escape.sql</string>
		</dict>
		<key>string_interpolation</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.sql</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(#\{)([^\}]*)(\})</string>
			<key>name</key>
			<string>string.interpolated.sql</string>
		</dict>
		<key>strings</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.sql</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.sql</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>this is faster than the next begin/end rule since sub-pattern will match till end-of-line and SQL files tend to have very long lines.</string>
					<key>match</key>
					<string>(')[^'\\]*(')</string>
					<key>name</key>
					<string>string.quoted.single.sql</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>'</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.sql</string>
						</dict>
					</dict>
					<key>end</key>
					<string>'</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.sql</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.single.sql</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string_escape</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.sql</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.sql</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>this is faster than the next begin/end rule since sub-pattern will match till end-of-line and SQL files tend to have very long lines.</string>
					<key>match</key>
					<string>(?&lt;!\.)(`)[^`\\]*(`)(?!\.)</string>
					<key>name</key>
					<string>string.quoted.other.backtick.sql</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>`</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.sql</string>
						</dict>
					</dict>
					<key>end</key>
					<string>`</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.sql</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.other.backtick.sql</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string_escape</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.sql</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.sql</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>this is faster than the next begin/end rule since sub-pattern will match till end-of-line and SQL files tend to have very long lines.</string>
					<key>match</key>
					<string>(")[^"#]*(")</string>
					<key>name</key>
					<string>string.quoted.double.sql</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>"</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.sql</string>
						</dict>
					</dict>
					<key>end</key>
					<string>"</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.sql</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.sql</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string_interpolation</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>%\{</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.sql</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\}</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.sql</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.other.quoted.brackets.sql</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string_interpolation</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.sql.mysql</string>
	<key>uuid</key>
	<string>6FBEE1E0-D923-4DE8-9B57-6096FAB14BB0</string>
</dict>
</plist>
